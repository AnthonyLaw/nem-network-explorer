import { PublicAccount } from '../account/PublicAccount';
import { NetworkType } from '../blockchain/NetworkType';
import { MosaicId } from '../mosaic/MosaicId';
import { AliasActionType } from '../namespace/AliasActionType';
import { NamespaceId } from '../namespace/NamespaceId';
import { UInt64 } from '../UInt64';
import { Deadline } from './Deadline';
import { Transaction } from './Transaction';
import { TransactionInfo } from './TransactionInfo';
/**
 * In case a mosaic has the flag 'supplyMutable' set to true, the creator of the mosaic can change the supply,
 * i.e. increase or decrease the supply.
 */
export declare class MosaicAliasTransaction extends Transaction {
    /**
     * The alias action type.
     */
    readonly actionType: AliasActionType;
    /**
     * The namespace id that will be an alias.
     */
    readonly namespaceId: NamespaceId;
    /**
     * The mosaic id.
     */
    readonly mosaicId: MosaicId;
    /**
     * Create a mosaic supply change transaction object
     * @param deadline - The deadline to include the transaction.
     * @param actionType - The namespace id.
     * @param namespaceId - The namespace id.
     * @param mosaicId - The mosaic id.
     * @param networkType - The network type.
     * @returns {MosaicAliasTransaction}
     */
    static create(deadline: Deadline, actionType: AliasActionType, namespaceId: NamespaceId, mosaicId: MosaicId, networkType: NetworkType): MosaicAliasTransaction;
    /**
     * @param networkType
     * @param version
     * @param deadline
     * @param fee
     * @param actionType
     * @param namespaceId
     * @param mosaicId
     * @param signature
     * @param signer
     * @param transactionInfo
     */
    constructor(networkType: NetworkType, version: number, deadline: Deadline, fee: UInt64, 
        /**
         * The alias action type.
         */
        actionType: AliasActionType, 
        /**
         * The namespace id that will be an alias.
         */
        namespaceId: NamespaceId, 
        /**
         * The mosaic id.
         */
        mosaicId: MosaicId, signature?: string, signer?: PublicAccount, transactionInfo?: TransactionInfo);
}
